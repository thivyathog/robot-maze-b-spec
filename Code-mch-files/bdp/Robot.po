THEORY ProofList IS
_f(1) & _f(2) & _f(3) & _f(19) & _f(58) & WellDefinedness_teleport.3,(_f(67) & _f(66) & _f(65) & _f(63) & _f(83) => _f(89));
_f(1) & _f(2) & _f(3) & _f(19) & _f(58) & WellDefinedness_teleport.2,(_f(67) & _f(66) & _f(65) & _f(63) & _f(83) => _f(88));
_f(1) & _f(2) & _f(3) & _f(19) & _f(58) & WellDefinedness_teleport.1,(_f(67) & _f(66) & _f(83) => _f(88));
_f(1) & _f(2) & _f(3) & _f(19) & _f(55) & WellDefinedness_resetMazeRobot.4,(_f(83) => _f(87));
_f(1) & _f(2) & _f(3) & _f(19) & _f(55) & WellDefinedness_resetMazeRobot.3,(_f(83) => _f(86));
_f(1) & _f(2) & _f(3) & _f(19) & _f(55) & WellDefinedness_resetMazeRobot.2,(_f(83) => _f(85));
_f(1) & _f(2) & _f(3) & _f(19) & _f(55) & WellDefinedness_resetMazeRobot.1,(_f(83) => _f(84));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & WellDefinedness_moveWest.2,(_f(46) & _f(47) & _f(83) => _f(89));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & WellDefinedness_moveWest.1,(_f(46) & _f(47) & _f(83) => _f(88));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & WellDefinedness_moveEast.2,(_f(38) & _f(39) & _f(83) => _f(89));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & WellDefinedness_moveEast.1,(_f(38) & _f(39) & _f(83) => _f(88));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & WellDefinedness_moveSouth.2,(_f(30) & _f(31) & _f(83) => _f(89));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & WellDefinedness_moveSouth.1,(_f(30) & _f(31) & _f(83) => _f(88));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & WellDefinedness_moveNorth.2,(_f(21) & _f(22) & _f(83) => _f(89));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & WellDefinedness_moveNorth.1,(_f(21) & _f(22) & _f(83) => _f(88));
_f(1) & _f(2) & _f(3) & WellDefinednessInitialisation.4,(_f(83) => _f(87));
_f(1) & _f(2) & _f(3) & WellDefinednessInitialisation.3,(_f(83) => _f(86));
_f(1) & _f(2) & _f(3) & WellDefinednessInitialisation.2,(_f(83) => _f(85));
_f(1) & _f(2) & _f(3) & WellDefinednessInitialisation.1,(_f(83) => _f(84));
_f(1) & _f(2) & _f(3) & _f(19) & _f(58) & teleport.4,(_f(67) & _f(66) & _f(65) & _f(63) & _f(4) & _f(17) => _f(71));
_f(1) & _f(2) & _f(3) & _f(19) & _f(58) & teleport.3,(_f(67) & _f(66) & _f(65) & _f(63) & _f(4) & _f(15) => _f(28));
_f(1) & _f(2) & _f(3) & _f(19) & _f(58) & teleport.2,(_f(67) & _f(66) & _f(65) & _f(63) & _f(4) & _f(11) => _f(70));
_f(1) & _f(2) & _f(3) & _f(19) & _f(58) & teleport.1,(_f(67) & _f(66) & _f(65) & _f(63) & _f(4) & _f(9) => _f(69));
_f(1) & _f(2) & _f(3) & _f(19) & _f(55) & resetMazeRobot.7,(_f(4) & _f(17) => _f(18));
_f(1) & _f(2) & _f(3) & _f(19) & _f(55) & resetMazeRobot.6,(_f(4) & _f(15) => _f(16));
_f(1) & _f(2) & _f(3) & _f(19) & _f(55) & resetMazeRobot.5,(_f(4) & _f(13) => _f(14));
_f(1) & _f(2) & _f(3) & _f(19) & _f(55) & resetMazeRobot.4,(_f(4) & _f(11) => _f(12));
_f(1) & _f(2) & _f(3) & _f(19) & _f(55) & resetMazeRobot.3,(_f(4) & _f(9) => _f(10));
_f(1) & _f(2) & _f(3) & _f(19) & _f(55) & resetMazeRobot.2,(_f(4) & _f(7) => _f(8));
_f(1) & _f(2) & _f(3) & _f(19) & _f(55) & resetMazeRobot.1,(_f(4) & _f(5) => _f(6));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveWest.4,(_f(46) & _f(47) & _f(4) & _f(17) => _f(53));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveWest.3,(_f(46) & _f(47) & _f(4) & _f(15) => _f(28));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveWest.2,(_f(46) & _f(47) & _f(4) & _f(9) => _f(52));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveWest.1,(_f(46) & _f(47) & _f(4) & _f(5) => _f(51));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveEast.4,(_f(38) & _f(39) & _f(4) & _f(17) => _f(45));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveEast.3,(_f(38) & _f(39) & _f(4) & _f(15) => _f(28));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveEast.2,(_f(38) & _f(39) & _f(4) & _f(9) => _f(44));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveEast.1,(_f(38) & _f(39) & _f(4) & _f(5) => _f(43));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveSouth.4,(_f(30) & _f(31) & _f(4) & _f(17) => _f(37));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveSouth.3,(_f(30) & _f(31) & _f(4) & _f(15) => _f(28));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveSouth.2,(_f(30) & _f(31) & _f(4) & _f(11) => _f(36));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveSouth.1,(_f(30) & _f(31) & _f(4) & _f(7) => _f(35));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveNorth.4,(_f(21) & _f(22) & _f(4) & _f(17) => _f(29));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveNorth.3,(_f(21) & _f(22) & _f(4) & _f(15) => _f(28));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveNorth.2,(_f(21) & _f(22) & _f(4) & _f(11) => _f(27));
_f(1) & _f(2) & _f(3) & _f(19) & _f(20) & moveNorth.1,(_f(21) & _f(22) & _f(4) & _f(7) => _f(26));
_f(1) & _f(2) & _f(3) & Initialisation.7,(_f(4) & _f(17) => _f(18));
_f(1) & _f(2) & _f(3) & Initialisation.6,(_f(4) & _f(15) => _f(16));
_f(1) & _f(2) & _f(3) & Initialisation.5,(_f(4) & _f(13) => _f(14));
_f(1) & _f(2) & _f(3) & Initialisation.4,(_f(4) & _f(11) => _f(12));
_f(1) & _f(2) & _f(3) & Initialisation.3,(_f(4) & _f(9) => _f(10));
_f(1) & _f(2) & _f(3) & Initialisation.2,(_f(4) & _f(7) => _f(8));
_f(1) & _f(2) & _f(3) & Initialisation.1,(_f(4) & _f(5) => _f(6))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
((MazeX) = (((1) .. (7)))) & ((MazeY) = (((1) .. (5)))) & ((MazeArea) = ((MazeX * MazeY))) & MazeBlocks : POW( MazeArea) & ((MazeBlocks) = (({((1) |-> (3))}\/{((2) |-> (1))}\/{((2) |-> (3))}\/{((2) |-> (5))}\/{((3) |-> (3))}\/{((4) |-> (2))}\/{((4) |-> (3))}\/{((4) |-> (4))}\/{((6) |-> (1))}\/{((6) |-> (2))}\/{((6) |-> (4))}\/{((7) |-> (4))}))) & FreeSquare : POW( MazeArea) & ((((FreeSquare) /\ (MazeBlocks))) = ({})) & ((((FreeSquare) \/ (MazeBlocks))) = (MazeArea)) & ((MazeInitial) : (FreeSquare)) & ((MazeInitial) : (MazeArea)) & ((MazeInitial) = (((1) |-> (1)))) & ((MazeFinal) : (FreeSquare)) & ((MazeFinal) : (MazeArea)) & ((MazeFinal) = (((1) |-> (5))));
((1..8)*{TOAST_NOTIFICATION}): FIN(NATURAL*{TOAST_NOTIFICATION}) & not(((1..8)*{TOAST_NOTIFICATION}) = {}) & ((1..2)*{IS_VISITED}): FIN(NATURAL*{IS_VISITED}) & not(((1..2)*{IS_VISITED}) = {}) & ((1..2)*{EXIT_STATUS}): FIN(NATURAL*{EXIT_STATUS}) & not(((1..2)*{EXIT_STATUS}) = {}) & ((1..5)*{MOVEMENT_DIRECTIONS}): FIN(NATURAL*{MOVEMENT_DIRECTIONS}) & not(((1..5)*{MOVEMENT_DIRECTIONS}) = {});
"Invariant is preserved";
"Check invariant ((xPosition) : (MazeX))";
(((prj1(((MazeX) , (MazeY))) )(MazeInitial)) : (MazeX));
"Check invariant ((yPosition) : (MazeY))";
(((prj2(((MazeX) , (MazeY))) )(MazeInitial)) : (MazeY));
"Check invariant ((xPosition) : ((NATURAL-{0})))";
(((prj1(((MazeX) , (MazeY))) )(MazeInitial)) : ((NATURAL-{0})));
"Check invariant ((yPosition) : ((NATURAL-{0})))";
(((prj2(((MazeX) , (MazeY))) )(MazeInitial)) : ((NATURAL-{0})));
"Check invariant ((((xPosition) |-> (yPosition))) : (FreeSquare))";
(((((prj1(((MazeX) , (MazeY))) )(MazeInitial)) |-> ((prj2(((MazeX) , (MazeY))) )(MazeInitial)))) : (FreeSquare));
"Check invariant ((visitedMazeSquares) : (seq(FreeSquare)))";
(([MazeInitial]) : (seq(FreeSquare)));
"Check invariant ((movedDirections) : (seq(MOVEMENT_DIRECTIONS)))";
(({}) : (seq(((1..5)*{MOVEMENT_DIRECTIONS}))));
((xPosition) : (MazeX)) & ((yPosition) : (MazeY)) & ((xPosition) : ((NATURAL-{0}))) & ((yPosition) : ((NATURAL-{0}))) & ((((xPosition) |-> (yPosition))) : (FreeSquare)) & visitedMazeSquares : NATURAL-{0} +-> FreeSquare & ((visitedMazeSquares) : (seq(FreeSquare))) & movedDirections : NATURAL-{0} +-> ((1..5)*{MOVEMENT_DIRECTIONS}) & ((movedDirections) : (seq(((1..5)*{MOVEMENT_DIRECTIONS}))));
not(((((xPosition) |-> (yPosition))) = (MazeFinal))) & ((((xPosition) |-> (yPosition))) : (MazeArea));
((((xPosition) |-> ((yPosition + 1)))) : (FreeSquare));
((((xPosition) |-> ((yPosition + 1)))) : (MazeArea));
((((xPosition) |-> ((yPosition + 1)))) : (MazeBlocks));
not(((((xPosition) |-> ((yPosition + 1)))) : (MazeBlocks)));
not(((((xPosition) |-> ((yPosition + 1)))) : (FreeSquare)) & ((((xPosition) |-> ((yPosition + 1)))) : (MazeArea)));
(((yPosition + 1)) : (MazeY));
(((yPosition + 1)) : ((NATURAL-{0})));
((((visitedMazeSquares) <- (((xPosition) |-> (yPosition))))) : (seq(FreeSquare)));
((((movedDirections) <- ((1|->MOVEMENT_DIRECTIONS)))) : (seq(((1..5)*{MOVEMENT_DIRECTIONS}))));
((((xPosition) |-> ((yPosition - 1)))) : (FreeSquare));
((((xPosition) |-> ((yPosition - 1)))) : (MazeArea));
((((xPosition) |-> ((yPosition - 1)))) : (MazeBlocks));
not(((((xPosition) |-> ((yPosition - 1)))) : (MazeBlocks)));
not(((((xPosition) |-> ((yPosition - 1)))) : (FreeSquare)) & ((((xPosition) |-> ((yPosition - 1)))) : (MazeArea)));
(((yPosition - 1)) : (MazeY));
(((yPosition - 1)) : ((NATURAL-{0})));
((((movedDirections) <- ((2|->MOVEMENT_DIRECTIONS)))) : (seq(((1..5)*{MOVEMENT_DIRECTIONS}))));
(((((xPosition + 1)) |-> (yPosition))) : (FreeSquare));
(((((xPosition + 1)) |-> (yPosition))) : (MazeArea));
(((((xPosition + 1)) |-> (yPosition))) : (MazeBlocks));
not((((((xPosition + 1)) |-> (yPosition))) : (MazeBlocks)));
not((((((xPosition + 1)) |-> (yPosition))) : (FreeSquare)) & (((((xPosition + 1)) |-> (yPosition))) : (MazeArea)));
(((xPosition + 1)) : (MazeX));
(((xPosition + 1)) : ((NATURAL-{0})));
((((movedDirections) <- ((3|->MOVEMENT_DIRECTIONS)))) : (seq(((1..5)*{MOVEMENT_DIRECTIONS}))));
(((((xPosition - 1)) |-> (yPosition))) : (FreeSquare));
(((((xPosition - 1)) |-> (yPosition))) : (MazeArea));
(((((xPosition - 1)) |-> (yPosition))) : (MazeBlocks));
not((((((xPosition - 1)) |-> (yPosition))) : (MazeBlocks)));
not((((((xPosition - 1)) |-> (yPosition))) : (FreeSquare)) & (((((xPosition - 1)) |-> (yPosition))) : (MazeArea)));
(((xPosition - 1)) : (MazeX));
(((xPosition - 1)) : ((NATURAL-{0})));
((((movedDirections) <- ((4|->MOVEMENT_DIRECTIONS)))) : (seq(((1..5)*{MOVEMENT_DIRECTIONS}))));
btrue;
((((xPosition) |-> (yPosition))) = (MazeFinal));
((foundExitSquare) : (((1..2)*{EXIT_STATUS})));
not(((((xPosition) |-> (yPosition))) = (MazeFinal)));
not(((((xPosition) |-> (yPosition))) = (MazeFinal))) & ((newXTeleport) : (MazeX)) & ((newYTeleport) : (MazeY));
((newXTeleport) = (xPosition));
((newYTeleport) = (yPosition));
((size(visitedMazeSquares)) = (1));
((((newXTeleport) |-> (newYTeleport))) = (MazeFinal));
not(((((newXTeleport) |-> (newYTeleport))) : (MazeBlocks)));
not(not(((((newXTeleport) |-> (newYTeleport))) : (MazeBlocks))));
not(((size(visitedMazeSquares)) = (1)) & ((((newXTeleport) |-> (newYTeleport))) = (MazeFinal)));
not(((newXTeleport) = (xPosition)) & ((newYTeleport) = (yPosition)));
((((newXTeleport) |-> (newYTeleport))) : (FreeSquare));
not(((((newXTeleport) |-> (newYTeleport))) : (FreeSquare)));
((newXTeleport) : ((NATURAL-{0})));
((newYTeleport) : ((NATURAL-{0})));
((((movedDirections) <- ((5|->MOVEMENT_DIRECTIONS)))) : (seq(((1..5)*{MOVEMENT_DIRECTIONS}))));
((xPost) : (MazeX)) & ((yPost) : (MazeY));
((((xPost) |-> (yPost))) : (ran(visitedMazeSquares)));
not(((((xPost) |-> (yPost))) : (ran(visitedMazeSquares))));
((1..8)*{TOAST_NOTIFICATION}): FIN(NATURAL*{TOAST_NOTIFICATION}) & not(((1..8)*{TOAST_NOTIFICATION}) = {});
visitedMazeSquares : NATURAL-{0} +-> FreeSquare;
((visitedMazeSquares) : (seq(FreeSquare)));
((((xPosition) |-> (yPosition))) : (FreeSquare));
((yPosition) : ((NATURAL-{0})));
((xPosition) : ((NATURAL-{0})));
((yPosition) : (MazeY));
((xPosition) : (MazeX));
"Well definedness";
((MazeInitial) : (dom(prj1(((MazeX) , (MazeY))))));
((prj1(((MazeX) , (MazeY)))) : (((dom(prj1(((MazeX) , (MazeY))))) +-> (ran(prj1(((MazeX) , (MazeY))))))));
((MazeInitial) : (dom(prj2(((MazeX) , (MazeY))))));
((prj2(((MazeX) , (MazeY)))) : (((dom(prj2(((MazeX) , (MazeY))))) +-> (ran(prj2(((MazeX) , (MazeY))))))));
((visitedMazeSquares) : (seq(ran(visitedMazeSquares))));
((movedDirections) : (seq(ran(movedDirections))));
((newXTeleport) : (MazeX));
((xPost) : (MazeX))
END
&
THEORY EnumerateX IS
EXIT_STATUS == {Yes,No};
IS_VISITED == {YES,NO};
MOVEMENT_DIRECTIONS == {NORTH,SOUTH,EAST,WEST,TELEPORT};
TOAST_NOTIFICATION == {SUCESSFULL_MOVE,INTERNALBLOCKDETECTED_CANNOT_MOVE,EXTERNALWALLDETECTED_CANNOT_MOVE,TELEPORTATION_SUCESSFULL,TELEPORTTOSAMEWALLS_DENIED,TELEPORTTOINTERNALWALLS_DENIED,TELEPORTTOEXITATSTART_DENIED,UNSUCCESSFUL_MOVE}
END
